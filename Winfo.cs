#if TOOLS

namespace Addons.FakeEmbed
{
	using System;
	using System.Runtime.InteropServices;
	using System.Text;

	/// <summary>
	/// Misc win32 bindings and constants
	/// 
	/// disclaimer:
	/// originally generated by a fancy robot at the behest of scottish wizard
	/// </summary>
	internal static class W32
	{
		// Consts for window pos
		public const int SWP_NOSIZE = 0x0001;
		public const int SWP_NOMOVE = 0x0002;
		public const int SWP_NOZORDER = 0x0004;
		public const int SWP_NOACTIVATE = 0x0010;
		public const int SWP_FRAMECHANGED = 0x0020;
		public const int SWP_SHOWWINDOW = 0x0040;
		public const int SWP_HIDEWINDOW = 0x0080;

		// Consts for window size
		public const int GWL_STYLE = -16;
		public const int WS_BORDER = 0x00800000;
		public const int WS_CAPTION = 0x00C00000;
		public const int WS_SYSMENU = 0x00080000;
		public const int WS_MINIMIZEBOX = 0x00020000;
		public const int WS_MAXIMIZEBOX = 0x00010000;

		[Flags]
		public enum PFlags : uint
		{
			PROCESS_QUERY_INFORMATION = 0x0400,
			PROCESS_VM_READ = 0x0010,
		}

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr Findwindow(string lpClassName, string lpWindowName);

		[DllImport("user32.dll")]
		public static extern IntPtr GetParent(IntPtr hWnd);


		[DllImport("kernel32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool CloseHandle(IntPtr hObject);

		[DllImport("user32.dll", CharSet = CharSet.Unicode)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

		[DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
		public static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);

		public static string GetWindowClass(IntPtr hwnd)
		{
			StringBuilder className = new StringBuilder(256);
			int len = GetClassName(hwnd, className, className.Capacity);
			return className.ToString();
		}

		[DllImport("user32.dll", CharSet = CharSet.Unicode)]
		public static extern IntPtr GetWindowThreadProcessId(IntPtr hWnd, out uint ProcessId);

		[DllImport("user32.dll")]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, uint uFlags);

		[DllImport("user32.dll")]
		public static extern int GetWindowLong(IntPtr hWnd, int nIndex);

		[DllImport("user32.dll")]
		public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);

		[DllImport("user32.dll")]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool IsWindow(IntPtr hWnd);

		[DllImport("kernel32.dll")]
		public static extern IntPtr OpenProcess(PFlags dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, uint dwProcessId);

	}
}

#endif